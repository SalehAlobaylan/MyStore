version: 2.1
orbs:
  node: circleci/node@5.0.2
  aws-cli: circleci/aws-cli@3.1.1

jobs:
  build:
    docker:
      - image: circleci/node:16
      - image: mongo:6.0
        environment:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password123
          MONGO_INITDB_DATABASE: Nike
    environment:
      MONGODB_URI: "mongodb://root:password123@localhost:27017/Nike?authSource=admin"
      POSTGRES_HOST: mystoredb1.cqc8bwsn9skh.us-east-1.rds.amazonaws.com
      POSTGRES_USERNAME: postgres
      POSTGRES_PASSWORD: postgres927319
      POSTGRES_DB: postgres
    steps:
      - node/install:
          node-version: "20"
      - checkout
      - run:
          name: Install Angular CLI
          command: npm install -g @angular/cli
      - run:
          name: Install Front-End Dependencies
          command: |
            echo "NODE --version" 
            echo $(node --version)
            echo "NPM --version" 
            echo $(npm --version)
            cd app/MyStore && npm install
      - run:
          name: Install API Dependencies
          command: npm install
      - run:
          name: Front-End Build
          command: npm run frontend:Build
      - run:
          name: API Build
          command: |
            dockerize -wait tcp://localhost:27017 -timeout 1m
            npm run ci:backend
      - run:
          name: Install dockerize
          command: |
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1

  deploy:
    docker:
      - image: cimg/python:3.9-node
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default
      - run:
          name: Install AWS EB CLI
          command: |
            pip install awsebcli
            eb --version
      - run:
          name: Build application
          command: |
            npm install
            cd app/MyStore && npm install && cd ../..
            npm run build
      - run:
          name: Create deployment package
          command: |
            # Create necessary configuration files
            echo "web: npm start" > Procfile
            echo "Creating .ebextensions directory"
            mkdir -p .ebextensions
            
            # Create NodeCommand configuration
            cat > .ebextensions/01_nodecommand.config << 'EOF'
            option_settings:
              aws:elasticbeanstalk:container:nodejs:
                NodeCommand: "npm start"
              aws:elasticbeanstalk:application:environment:
                NODE_ENV: production
                PORT: 8080
            EOF
            
            # Create logs configuration
            cat > .ebextensions/02_logs.config << 'EOF'
            files:
              "/opt/elasticbeanstalk/tasks/taillogs.d/nodejs.conf":
                mode: "000755"
                owner: root
                group: root
                content: |
                  /var/log/nodejs/nodejs.log
                  /var/log/nginx/error.log
                  /var/log/nginx/access.log
                  /var/log/eb-engine.log
            commands:
              01_create_log_dir:
                command: mkdir -p /var/log/nodejs
              02_change_permissions:
                command: chmod 777 /var/log/nodejs
            EOF
            
            # Create a deployment zip file
            zip -r "deploy.zip" . -x "node_modules/*" "app/MyStore/node_modules/*" ".git/*"
      - run:
          name: Deploy to Elastic Beanstalk
          command: |
            # Check AWS configuration
            aws configure list
            
            # Initialize EB application if needed (this won't override existing apps)
            echo "Configuring EB CLI"
            mkdir -p ~/.elasticbeanstalk
            
            # Configure EB CLI
            cat > ~/.elasticbeanstalk/config.yml << 'EOF'
            branch-defaults:
              master:
                environment: MyStore-dev
            global:
              application_name: MyStore
              default_region: us-east-1
            EOF
            
            # Deploy the application using the AWS CLI directly
            echo "Starting deployment to EB"
            aws elasticbeanstalk create-application-version \
              --application-name MyStore \
              --version-label "circleci-${CIRCLE_BUILD_NUM}" \
              --source-bundle S3Bucket="elasticbeanstalk-us-east-1-204546021765",S3Key="deploy.zip" \
              --auto-create-application

            # Upload zip to S3
            aws s3 cp deploy.zip s3://elasticbeanstalk-us-east-1-204546021765/deploy.zip
            
            # Update environment with new version
            aws elasticbeanstalk update-environment \
              --environment-name MyStore-dev \
              --version-label "circleci-${CIRCLE_BUILD_NUM}"
            
            echo "Deployment triggered, check EB console for status"

workflows:
  Mystore:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master