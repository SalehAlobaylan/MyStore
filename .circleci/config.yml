version: 2.1
orbs:
  node: circleci/node@5.0.2
  eb: circleci/aws-elastic-beanstalk@2.0.1
  aws-cli: circleci/aws-cli@3.1.1

jobs:
  build:
    docker:
      - image: circleci/node:16
      - image: mongo:6.0
        environment:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password123
          MONGO_INITDB_DATABASE: Nike
    environment:
      MONGODB_URI: "mongodb://root:password123@localhost:27017/Nike?authSource=admin"
      POSTGRES_HOST: mystoredb1.cqc8bwsn9skh.us-east-1.rds.amazonaws.com
      POSTGRES_USERNAME: postgres
      POSTGRES_PASSWORD: postgres927319
      POSTGRES_DB: postgres
    steps:
      - node/install:
          node-version: "20"
      - checkout
      - run:
          name: Install Angular CLI
          command: npm install -g @angular/cli
      - run:
          name: Install Front-End Dependencies
          command: |
            echo "NODE --version" 
            echo $(node --version)
            echo "NPM --version" 
            echo $(npm --version)
            cd app/MyStore && npm install
      - run:
          name: Install API Dependencies
          command: npm install
      - run:
          name: Front-End Build
          command: npm run frontend:Build
      - run:
          name: API Build
          command: |
            dockerize -wait tcp://localhost:27017 -timeout 1m
            npm run ci:backend
      - run:
          name: Install dockerize
          command: |
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1

  deploy:
    docker:
      - image: cimg/node:20.6
    steps:
      - checkout
      - run:
          name: Install EB CLI
          command: |
            sudo apt-get update
            sudo apt-get install -y python3-pip
            sudo pip3 install awsebcli
      - run:
          name: Configure AWS
          command: |
            mkdir -p ~/.aws
            echo "[default]" > ~/.aws/config
            echo "region = us-east-1" >> ~/.aws/config
            echo "[default]" > ~/.aws/credentials
            echo "aws_access_key_id = ${AWS_ACCESS_KEY_ID}" >> ~/.aws/credentials
            echo "aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}" >> ~/.aws/credentials
      - run:
          name: Build app
          command: |
            npm install
            cd app/MyStore && npm install && cd ../..
            npm run build
      - run:
          name: Deploy to Elastic Beanstalk
          command: |
            # Create necessary files for deployment
            echo "Creating Procfile and config files"
            echo "web: npm start" > Procfile
            
            # Ensure .ebextensions exists
            mkdir -p .ebextensions
            cat > .ebextensions/01_nodecommand.config << EOL
            option_settings:
              aws:elasticbeanstalk:container:nodejs:
                NodeCommand: "npm start"
              aws:elasticbeanstalk:application:environment:
                NODE_ENV: production
                PORT: 8080
            EOL
            
            # Deploy to EB
            eb use MyStore-dev
            eb deploy --staged --timeout 30 \
              --env-vars PORT=8080,NODE_ENV=production,POSTGRES_HOST=$POSTGRES_HOST,POSTGRES_USERNAME=$POSTGRES_USERNAME,POSTGRES_PASSWORD=$POSTGRES_PASSWORD,POSTGRES_DB=$POSTGRES_DB

workflows:
  Mystore:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master