version: 2.1
orbs:
  node: circleci/node@5.0.2
  aws-cli: circleci/aws-cli@3.1.1

jobs:
  build:
    docker:
      - image: cimg/node:20.11.1
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            npm install
            cd app/MyStore && npm install && cd ../..
      - run:
          name: Build application
          command: |
            # Build Angular frontend
            cd app/MyStore && ng build && cd ../..
            # Compile backend
            npx tsc -p app/backend/tsconfig.json
      - persist_to_workspace:
          root: .
          paths:
            - dist/
            - package.json
            - Procfile
            - .ebextensions/
            - app/MyStore/dist/

  deploy:
    docker:
      - image: cimg/python:3.9-node
    environment:
      AWS_REGION: us-east-1
    steps:
      - checkout
      - attach_workspace:
          at: .
      - aws-cli/setup:
          profile-name: default
      - run:
          name: Verify AWS Credentials
          command: |
            # Verify AWS identity (will fail if credentials are invalid)
            echo "Verifying AWS credentials..."
            aws sts get-caller-identity --query "Account" || {
              echo "AWS credentials verification failed!"
              echo "Please check that AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY are correctly set in CircleCI environment variables."
              exit 1
            }
      - run:
          name: Create deployment package
          command: |
            echo "Creating deployment package..."
            
            # Create Procfile
            echo "web: npm start" > Procfile
            
            # Create .ebextensions directory
            mkdir -p .ebextensions
            
            # Create nginx config to fix 502 errors
            echo "Creating nginx config..."
            cat > .ebextensions/01_nginx.config << EOL
            files:
              "/etc/nginx/conf.d/proxy.conf":
                mode: "000644"
                owner: root
                group: root
                content: |
                  upstream nodejs {
                    server 127.0.0.1:8081;
                    keepalive 256;
                  }
                  server {
                    listen 8080;
                    server_name localhost;
                    location / {
                      proxy_pass http://nodejs;
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade \$http_upgrade;
                      proxy_set_header Connection "upgrade";
                      proxy_set_header Host \$host;
                      proxy_set_header X-Real-IP \$remote_addr;
                      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                      proxy_cache_bypass \$http_upgrade;
                    }
                  }
            EOL
            
            # Create node command config
            echo "Creating node command config..."
            cat > .ebextensions/02_nodecommand.config << EOL
            option_settings:
              aws:elasticbeanstalk:container:nodejs:
                NodeCommand: "npm start"
              aws:elasticbeanstalk:application:environment:
                NODE_ENV: production
                PORT: 8081
            EOL
            
            # Create deployment zip
            echo "Creating deployment zip..."
            zip -r "deploy.zip" package.json package-lock.json Procfile dist/ .ebextensions/ app/MyStore/dist/
            
            # List files in the zip for verification
            unzip -l deploy.zip | head -20
      - run:
          name: Deploy to Elastic Beanstalk
          command: |
            # Install EB CLI
            echo "Installing EB CLI..."
            pip install awsebcli --user
            
            # Initialize EB CLI
            mkdir -p ~/.elasticbeanstalk
            cat > ~/.elasticbeanstalk/config.yml << EOL
            branch-defaults:
              default:
                environment: MyStore-dev
            global:
              application_name: MyStore
              default_ec2_keyname: null
              default_platform: Node.js 20
              default_region: us-east-1
              sc: git
            EOL
            
            # List EB environments to confirm connection
            echo "Listing EB environments..."
            aws elasticbeanstalk describe-environments --application-name MyStore --query "Environments[].{Name:EnvironmentName,Status:Status,Health:Health}" --output table
            
            # Upload to S3 directly
            echo "Uploading to S3..."
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            S3_KEY="deploy-${TIMESTAMP}.zip"
            aws s3 cp deploy.zip "s3://elasticbeanstalk-us-east-1-204546021765/${S3_KEY}"
            
            # Create application version
            echo "Creating application version..."
            aws elasticbeanstalk create-application-version \
              --application-name MyStore \
              --version-label "v${TIMESTAMP}" \
              --source-bundle S3Bucket="elasticbeanstalk-us-east-1-204546021765",S3Key="${S3_KEY}"
            
            # Update environment
            echo "Updating environment..."
            aws elasticbeanstalk update-environment \
              --environment-name MyStore-dev \
              --version-label "v${TIMESTAMP}"
            
            # Wait for deployment to start
            echo "Waiting for deployment to start..."
            sleep 10
            
            # Check deployment status
            echo "Checking deployment status..."
            aws elasticbeanstalk describe-environments --environment-names MyStore-dev --query "Environments[0].{Status:Status,Health:Health}" --output table

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master