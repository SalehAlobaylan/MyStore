version: 2.1
orbs:
  node: circleci/node@5.0.2
  aws-cli: circleci/aws-cli@3.1.1

jobs:
  build:
    docker:
      # Using a newer Node.js version compatible with Angular CLI requirements
      - image: cimg/node:20.11.1
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # Use npx instead of global installs
            npm install
            cd app/MyStore && npm install && cd ../..
      - run:
          name: Build application
          command: |
            # Build Angular frontend using npx
            cd app/MyStore && npx ng build --configuration=production && cd ../..
            
            # Compile TypeScript files using npx
            npx tsc -p app/backend/tsconfig.json
            
            # Create dist directory for deployment
            mkdir -p dist/app/MyStore
            cp -r app/MyStore/dist/my-store/* dist/app/MyStore/
      - persist_to_workspace:
          root: .
          paths:
            - dist
            - node_modules
            - package.json
            - package-lock.json
            - Procfile
            - .ebextensions

  deploy:
    docker:
      - image: cimg/python:3.9-node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - aws-cli/setup
      - run:
          name: Install EB CLI
          command: |
            sudo pip install awsebcli
      - run:
          name: Create deployment files
          command: |
            # Create Procfile if doesn't exist
            echo "web: npm start" > Procfile
            
            # Ensure .ebextensions directory exists
            mkdir -p .ebextensions
            
            # Create nodecommand.config using individual echo commands
            echo "option_settings:" > .ebextensions/01_nodecommand.config
            echo "  aws:elasticbeanstalk:container:nodejs:" >> .ebextensions/01_nodecommand.config
            echo "    NodeCommand: \"npm start\"" >> .ebextensions/01_nodecommand.config
            echo "  aws:elasticbeanstalk:application:environment:" >> .ebextensions/01_nodecommand.config
            echo "    NODE_ENV: production" >> .ebextensions/01_nodecommand.config
            echo "    PORT: 8081" >> .ebextensions/01_nodecommand.config
            echo "    POSTGRES_HOST: ${POSTGRES_HOST}" >> .ebextensions/01_nodecommand.config
            echo "    POSTGRES_USERNAME: ${POSTGRES_USERNAME}" >> .ebextensions/01_nodecommand.config
            echo "    POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}" >> .ebextensions/01_nodecommand.config
            echo "    POSTGRES_DB: ${POSTGRES_DB}" >> .ebextensions/01_nodecommand.config
            
            # Create zip file
            zip -r "deploy.zip" dist package.json package-lock.json Procfile .ebextensions
      - run:
          name: Deploy to Elastic Beanstalk
          command: |
            # Upload zip to S3
            aws s3 cp deploy.zip s3://elasticbeanstalk-us-east-1-204546021765/deploy-${CIRCLE_BUILD_NUM}.zip
            
            # Create version
            aws elasticbeanstalk create-application-version \
              --application-name MyStore \
              --version-label mystore-${CIRCLE_BUILD_NUM} \
              --source-bundle S3Bucket="elasticbeanstalk-us-east-1-204546021765",S3Key="deploy-${CIRCLE_BUILD_NUM}.zip"
            
            # Deploy version
            aws elasticbeanstalk update-environment \
              --environment-name MyStore-dev \
              --version-label mystore-${CIRCLE_BUILD_NUM}

workflows:
  deploy-workflow:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master